# Используем базовый образ Debian 10.4
FROM debian:10.4

# Аргумент для выбора библиотеки BLAS (MKL или OpenBLAS)
ARG KALDI_MKL=0

# Обновление пакетов и установка зависимостей
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        bzip2 \
        unzip \
        xz-utils \
        g++ \
        make \
        cmake \
        git \
        python3 \
        python3-dev \
        python3-websockets \
        python3-setuptools \
        python3-pip \
        python3-wheel \
        python3-cffi \
        zlib1g-dev \
        automake \
        autoconf \
        libtool \
        pkg-config \
        ca-certificates \
        inotify-tools \
        libboost-all-dev \
    && rm -rf /var/lib/apt/lists/*

# Клонируем и собираем Kaldi
RUN git clone -b vosk --single-branch https://github.com/alphacep/kaldi /opt/kaldi && \
    cd /opt/kaldi/tools && \
    sed -i 's:status=0:exit 0:g' extras/check_dependencies.sh && \
    make -j $(nproc) openfst cub && \
    if [ "$KALDI_MKL" -eq "1" ]; then \
        extras/install_mkl.sh; \
    else \
        extras/install_openblas_clapack.sh; \
    fi && \
    cd /opt/kaldi/src && \
    if [ "$KALDI_MKL" -eq "1" ]; then \
        ./configure --mathlib=MKL --shared; \
    else \
        ./configure --mathlib=OPENBLAS_CLAPACK --shared; \
    fi && \
    sed -i 's:-msse -msse2:-msse -msse2:g' kaldi.mk && \
    sed -i 's: -O1 : -O3 :g' kaldi.mk && \
    make -j $(nproc) online2 lm rnnlm latbin online2bin lmbin rnnlmbin fstbin bin

# Устанавливаем Vosk API
RUN git clone https://github.com/alphacep/vosk-api /opt/vosk-api && \
    cd /opt/vosk-api/src && \
    KALDI_MKL=$KALDI_MKL KALDI_ROOT=/opt/kaldi make -j $(nproc) && \
    cd /opt/vosk-api/python && \
    python3 setup.py install

# Клонируем Vosk сервер
RUN git clone https://github.com/alphacep/vosk-server /opt/vosk-server

# Установка русской модели Vosk
ENV RUVERSION=0.10
RUN mkdir /opt/vosk-model-ru && \
    cd /opt/vosk-model-ru && \
    wget -q --no-check-certificate http://alphacephei.com/kaldi/models/vosk-model-ru-${RUVERSION}.zip && \
    unzip vosk-model-ru-${RUVERSION}.zip && \
    mv vosk-model-ru-${RUVERSION} model && \
    rm -rf vosk-model-ru-${RUVERSION}.zip

# Настройка переменных окружения
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV KALDI_ROOT=/opt/kaldi
ENV PATH=$KALDI_ROOT/src/bin:$KALDI_ROOT/src/fstbin:$KALDI_ROOT/src/latbin:$KALDI_ROOT/src/online2bin:$KALDI_ROOT/src/lmbin:$KALDI_ROOT/src/rnnlmbin:$KALDI_ROOT/egs/mini_librispeech/s5/utils:$KALDI_ROOT/tools/openfst/bin:$PWD:$PATH  
ENV PATH=$PATH:/opt/vosk-model-ru/model/new/kenlm/build/bin

# Копируем дополнительные файлы
COPY . /opt/vosk-model-ru/model/new

# Проверяем, существует ли update_corpus.sh, и даём ему права на выполнение
RUN test -f /opt/vosk-model-ru/model/new/update_corpus.sh && chmod +x /opt/vosk-model-ru/model/new/update_corpus.sh || echo "Файл update_corpus.sh не найден!"

# Устанавливаем KenLM (языковую модель)
RUN mkdir -p /opt/vosk-model-ru/model/new/kenlm && \
    cd /opt/vosk-model-ru/model/new/kenlm && \
    git clone https://github.com/kpu/kenlm.git . && \
    mkdir ./build && cd ./build && \
    cmake .. && make -j $(nproc)

# Разрешаем доступ к порту 2700
EXPOSE 2700

# Устанавливаем рабочую директорию
WORKDIR /opt/vosk-server/websocket

# Команда запуска контейнера
CMD ["/opt/vosk-model-ru/model/new/update_corpus.sh"]
